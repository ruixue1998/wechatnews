# 工作流程的名称
name: Update Daily News

# 控制工作流程触发的条件
on:
  # 1. 计划任务：使用 cron 语法
  schedule:
    # 每天的 02:30 (UTC时间) 运行。这对应北京时间 (UTC+8) 的 10:30。
    - cron: '30 2 * * *'
  
  # 2. 手动触发：允许你在 GitHub Actions 页面手动运行此工作流程
  workflow_dispatch:

# 定义一个或多个作业（jobs）
jobs:
  # 作业的唯一ID
  build-and-commit:
    # 指定运行此作业的虚拟机环境
    runs-on: ubuntu-latest

    # 作业中执行的一系列步骤
    steps:
      # 第一步：检出（下载）你的仓库代码到虚拟机中
      - name: Checkout repository
        uses: actions/checkout@v4

      # 第二步：设置 Python 环境
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10' # 你可以指定需要的 Python 版本

      # 第三步：安装依赖库
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # 第四步：运行你的 Python 脚本
      - name: Run Python script to generate news
        # 将我们设置的 GitHub Secret 注入到环境变量中
        env:
          AI_AUTH_TOKEN: ${{ secrets.AI_AUTH_TOKEN }}
        run: python main.py

      # 第五步：提交生成的文件到仓库
      - name: Commit and push if changed
        run: |
          # 配置 Git 用户信息
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          
          # 将生成的文件添加到暂存区
          git add DailyNews.html
          
          # 检查是否有文件变动，如果有，则提交并推送
          # 'git diff --staged --quiet' 会在有变动时返回非0值，从而执行后续命令
          git diff --staged --quiet || (git commit -m "Update Daily News - $(date -u +'%Y-%m-%d %H:%M:%S UTC')" && git push)
          
          echo "文件已成功更新并推送。"
